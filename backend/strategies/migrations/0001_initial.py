# Generated by Django 5.2.5 on 2025-09-03 05:25

from decimal import Decimal

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Strategy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        default="My Strategy",
                        help_text="User-friendly name for this strategy",
                        max_length=100,
                    ),
                ),
                (
                    "order_size_pct",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("10.00"),
                        help_text="Order size as percentage of NAV (1.00-100.00%)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("1.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                    ),
                ),
                (
                    "min_delta_quote",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("10.00"),
                        help_text="Minimum delta in quote currency (USDT) to trigger rebalancing",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this strategy is active and should be executed",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "last_rebalanced_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last time this strategy was executed",
                        null=True,
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        help_text="User who owns this strategy",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="strategy",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Strategy",
                "verbose_name_plural": "Strategies",
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="RebalanceExecution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        help_text="Execution status",
                        max_length=20,
                    ),
                ),
                (
                    "portfolio_nav",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Portfolio NAV at execution time",
                        max_digits=15,
                    ),
                ),
                (
                    "total_delta",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total rebalancing delta in quote currency",
                        max_digits=15,
                    ),
                ),
                (
                    "orders_count",
                    models.IntegerField(
                        default=0,
                        help_text="Number of orders created for this rebalancing",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message if execution failed"
                    ),
                ),
                (
                    "strategy",
                    models.ForeignKey(
                        help_text="Strategy that was executed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="executions",
                        to="strategies.strategy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rebalance Execution",
                "verbose_name_plural": "Rebalance Executions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="StrategyAllocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "asset",
                    models.CharField(
                        help_text="Asset symbol (e.g., 'BTC', 'ETH', 'USDT')",
                        max_length=20,
                    ),
                ),
                (
                    "target_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Target allocation percentage (0.01-100.00%)",
                        max_digits=6,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "strategy",
                    models.ForeignKey(
                        help_text="Strategy this allocation belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="allocations",
                        to="strategies.strategy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Strategy Allocation",
                "verbose_name_plural": "Strategy Allocations",
                "ordering": ["-target_percentage", "asset"],
                "unique_together": {("strategy", "asset")},
            },
        ),
    ]
