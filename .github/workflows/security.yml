# üõ°Ô∏è Security & Dependencies Check
#
# üéØ –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞:
#   - Push –≤ main –≤–µ—Ç–∫—É
#   - Pull Request
#   - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
#   - Manual dispatch
#
# üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
#   - –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö (Python + Node.js)
#   - –°–µ–∫—Ä–µ—Ç—ã –≤ –∫–æ–¥–µ (GitLeaks)
#   - –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ (CodeQL)
#   - –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
#
# üìù –ê–î–ê–ü–¢–ê–¶–ò–Ø –î–õ–Ø –ù–û–í–û–ì–û –ü–†–û–ï–ö–¢–ê:
#   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö
#   2. –î–æ–±–∞–≤—å—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è false positives
#   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

name: üõ°Ô∏è Security & Dependencies

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 9:00 UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

# üîí –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: read  # –î–ª—è GitLeaks PR scanning

# üåç Environment variables  
env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "22"

jobs:
  # üêç Python Security Scan
  python-security:
    name: üêç Python Security
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Install uv
        uses: astral-sh/setup-uv@v6

      - name: üîç Vulnerability scan with Safety
        working-directory: ./backend
        run: |
          uv add --dev safety
          uv run safety check --json --output safety-report.json || true
          
      - name: üîç Security linting with Bandit
        working-directory: ./backend
        run: |
          uv add --dev bandit
          uv run bandit -r app/ -f json -o bandit-report.json || true
          
      - name: üì§ Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-security-reports
          path: |
            backend/safety-report.json
            backend/bandit-report.json
          retention-days: 30

  # üì¶ Node.js Security Scan  
  nodejs-security:
    name: üì¶ Node.js Security
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10"

      - name: üìã Install dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: üîç Audit dependencies
        working-directory: ./frontend
        run: |
          pnpm audit --json > audit-report.json || true
          cat audit-report.json

      - name: üì§ Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nodejs-security-reports
          path: frontend/audit-report.json
          retention-days: 30

  # üîê Secrets Detection
  secrets-scan:
    name: üîê Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

      - name: üîç GitLeaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # üî¨ CodeQL Analysis
  codeql:
    name: üî¨ CodeQL Analysis  
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
      
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üî¨ Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-extended,security-and-quality

      - name: üèóÔ∏è Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: üî¨ Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
        continue-on-error: true  # Don't fail if code scanning is not enabled

  # üìä Dependency Updates Check
  dependency-updates:
    name: üìä Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Check Python updates
        working-directory: ./backend
        run: |
          echo "üîç Checking for Python dependency updates..."
          pip install pip-outdated
          pip list --outdated

      - name: üì¶ Check Node.js updates
        working-directory: ./frontend
        run: |
          echo "üîç Checking for Node.js dependency updates..."
          npm install -g npm-check-updates
          ncu

      - name: üìù Create update summary
        run: |
          echo "## üìä Dependency Update Summary" > update-summary.md
          echo "Scheduled check completed on $(date)" >> update-summary.md
          echo "Check the logs above for available updates." >> update-summary.md

      - name: üì§ Upload update summary
        uses: actions/upload-artifact@v4
        with:
          name: dependency-updates
          path: update-summary.md
          retention-days: 7

  # ‚úÖ Security Summary
  security-summary:
    name: ‚úÖ Security Summary
    runs-on: ubuntu-latest
    needs: [python-security, nodejs-security, secrets-scan, codeql]
    if: always()
    
    steps:
      - name: üìä Security results
        run: |
          echo "üõ°Ô∏è Security Scan Results:"
          echo "Python Security: ${{ needs.python-security.result }}"
          echo "Node.js Security: ${{ needs.nodejs-security.result }}"
          echo "Secrets Scan: ${{ needs.secrets-scan.result }}"
          echo "CodeQL: ${{ needs.codeql.result }}"
          
          if [[ "${{ needs.python-security.result }}" == "failure" ]] || \
             [[ "${{ needs.nodejs-security.result }}" == "failure" ]] || \
             [[ "${{ needs.secrets-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.codeql.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è Security issues detected!"
            echo "::warning title=Security Alert::Please review security scan results"
          else
            echo "‚úÖ No security issues detected"
            echo "::notice title=Security Clean::All security scans passed"
          fi

      - name: üí¨ PR Comment (security issues)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            await github.rest.issues.createComment({
              owner,
              repo, 
              issue_number: number,
              body: `## ‚ö†Ô∏è Security Scan Alert\n\nSome security checks failed. Please review:\n- Check uploaded artifacts for detailed reports\n- Review CodeQL findings in Security tab\n- Fix any identified vulnerabilities\n\nüõ°Ô∏è Security is important!`
            });

# üìù –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê:
#
# 1. üîê GitLeaks config (.gitleaks.toml):
#    –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è false positives
#
# 2. üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
#    –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Slack/Discord webhooks –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
#
# 3. ü§ñ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:
#    –î–æ–±–∞–≤—å—Ç–µ Dependabot –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö PR —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
#
# 4. üìä Badges:
#    –î–æ–±–∞–≤—å—Ç–µ security badges –≤ README.md
#
# 5. üè¢ Enterprise:
#    –î–ª—è enterprise –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–æ–±–∞–≤—å—Ç–µ SAST/DAST —Å–∫–∞–Ω–µ—Ä—ã
