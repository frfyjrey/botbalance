# 🚀 Backend Deployment Pipeline
#
# 🎯 Деплоит Django API + Celery Worker в Google Cloud Run
# 
# Триггеры:
#   - Тег вида v1.0.0, v1.0.1 и т.д. 
#   - Manual dispatch для экстренного деплоя
#
# 📦 Что деплоится:
#   - Docker образ в Artifact Registry
#   - Cloud Run сервисы (API + Worker)
#   - Database миграции

name: 🚀 Deploy Backend

on:
  push:
    tags:
      - 'v*'  # v1.0.0, v1.0.1, etc.
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      force_deploy:
        description: 'Force deploy (skip some checks)'
        required: false
        default: false
        type: boolean

# 🔒 Разрешения
permissions:
  contents: read
  id-token: write  # For Google Cloud authentication

# 🌍 Environment variables  
env:
  PROJECT_ID: botbalance
  REGION: asia-southeast1
  AR_REPO: botbalance-backend
  SERVICE_API: botbalance-api
  SERVICE_WORKER: botbalance-worker
  
jobs:
  deploy:
    name: 🚀 Deploy to ${{ inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'production' }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🛠️ Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🐳 Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: 🏷️ Extract version from tag
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="manual-$(date +%Y%m%d-%H%M%S)"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/api:$VERSION" >> $GITHUB_OUTPUT

      - name: 🔨 Build Docker image
        working-directory: ./backend
        run: |
          docker build \
            --platform linux/amd64 \
            --tag ${{ steps.version.outputs.IMAGE_TAG }} \
            --tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/api:latest \
            .

      - name: 📤 Push to Artifact Registry
        run: |
          docker push ${{ steps.version.outputs.IMAGE_TAG }}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/api:latest

      - name: 🗄️ Run database migrations
        run: |
          gcloud run jobs create migrate-${{ steps.version.outputs.VERSION }} \
            --image=${{ steps.version.outputs.IMAGE_TAG }} \
            --region=${{ env.REGION }} \
            --set-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:botbalance-pg \
            --set-secrets=DJANGO_SECRET_KEY=DJANGO_SECRET_KEY:latest,DB_HOST=DB_HOST:latest,DB_USER=DB_USER:latest,DB_PASSWORD=DB_PASSWORD:latest,DB_NAME=DB_NAME:latest \
            --set-env-vars=DJANGO_SETTINGS_MODULE=botbalance.settings.migrate \
            --memory=512Mi --cpu=1 \
            --command=python --args="manage.py,migrate,--noinput" \
            --max-retries=1 || true
          
          gcloud run jobs execute migrate-${{ steps.version.outputs.VERSION }} \
            --region=${{ env.REGION }} \
            --wait
          
          # Cleanup migration job
          gcloud run jobs delete migrate-${{ steps.version.outputs.VERSION }} \
            --region=${{ env.REGION }} \
            --quiet

      - name: 🚀 Deploy API Service
        run: |
          gcloud run deploy ${{ env.SERVICE_API }} \
            --image=${{ steps.version.outputs.IMAGE_TAG }} \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --set-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:botbalance-pg \
            --set-secrets=DJANGO_SECRET_KEY=DJANGO_SECRET_KEY:latest,REDIS_URL=REDIS_URL:latest,ENCRYPTION_KEY=ENCRYPTION_KEY:latest,DB_HOST=DB_HOST:latest,DB_USER=DB_USER:latest,DB_PASSWORD=DB_PASSWORD:latest,DB_NAME=DB_NAME:latest,CORS_ALLOWED_ORIGINS=CORS_ALLOWED_ORIGINS:latest \
            --set-env-vars=DJANGO_SETTINGS_MODULE=botbalance.settings.prod \
            --memory=512Mi --cpu=1 --concurrency=40 --min-instances=1 \
            --tag=${{ steps.version.outputs.VERSION }}

      - name: 🔄 Deploy Celery Worker
        run: |
          gcloud run deploy ${{ env.SERVICE_WORKER }} \
            --image=${{ steps.version.outputs.IMAGE_TAG }} \
            --region=${{ env.REGION }} \
            --platform=managed \
            --no-allow-unauthenticated \
            --set-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:botbalance-pg \
            --set-secrets=DJANGO_SECRET_KEY=DJANGO_SECRET_KEY:latest,REDIS_URL=REDIS_URL:latest,ENCRYPTION_KEY=ENCRYPTION_KEY:latest,DB_HOST=DB_HOST:latest,DB_USER=DB_USER:latest,DB_PASSWORD=DB_PASSWORD:latest,DB_NAME=DB_NAME:latest \
            --set-env-vars=DJANGO_SETTINGS_MODULE=botbalance.settings.prod \
            --memory=512Mi --cpu=1 --concurrency=1 --min-instances=1 --max-instances=3 \
            --no-cpu-throttling \
            --command=python --args="worker_entrypoint.py" \
            --tag=${{ steps.version.outputs.VERSION }}

      - name: ✅ Health check
        run: |
          echo "⏳ Waiting for services to be ready..."
          sleep 30
          
          API_URL="https://api.botbalance.me"
          
          # Check API health
          if curl -sf "$API_URL/api/health/" > /dev/null; then
            echo "✅ API is healthy"
          else
            echo "❌ API health check failed"
            exit 1
          fi
          
          # Check API root
          if curl -sf "$API_URL/" | grep -q "BotBalance API"; then
            echo "✅ API root is responding"
          else
            echo "❌ API root check failed"
            exit 1
          fi

      - name: 📝 Deploy summary
        run: |
          echo "## 🚀 Backend Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "**API:** https://api.botbalance.me" >> $GITHUB_STEP_SUMMARY
          echo "**Admin:** https://api.botbalance.me/nukoadmin/" >> $GITHUB_STEP_SUMMARY
          echo "**Health:** https://api.botbalance.me/api/health/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Services Deployed:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ API Service: ${{ env.SERVICE_API }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Worker Service: ${{ env.SERVICE_WORKER }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Database migrations completed" >> $GITHUB_STEP_SUMMARY

  # 🔄 Rollback job (manual trigger)
  rollback:
    name: 🔄 Rollback
    runs-on: ubuntu-latest
    if: failure() && github.event.inputs.force_deploy != 'true'
    needs: deploy
    environment: ${{ inputs.environment || 'production' }}
    
    steps:
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🛠️ Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🔄 Rollback to previous revision
        run: |
          echo "🔄 Rolling back to previous revision..."
          
          # Rollback API
          gcloud run services update-traffic ${{ env.SERVICE_API }} \
            --to-revisions=LATEST=100 \
            --region=${{ env.REGION }}
          
          # Rollback Worker  
          gcloud run services update-traffic ${{ env.SERVICE_WORKER }} \
            --to-revisions=LATEST=100 \
            --region=${{ env.REGION }}
          
          echo "✅ Rollback completed"
