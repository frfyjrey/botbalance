# üîÑ Continuous Integration Pipeline
# 
# üéØ –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞:
#   - Push –≤ main/develop –≤–µ—Ç–∫–∏
#   - Pull Request –≤ main
#   - Manual dispatch
#
# üß™ –¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
#   - Backend: Django + DRF + Celery (Linux, macOS, Windows)
#   - Frontend: React + TypeScript (Node 18, 20, 22)  
#   - E2E: Playwright smoke tests
#
# üìù –ê–î–ê–ü–¢–ê–¶–ò–Ø –î–õ–Ø –ù–û–í–û–ì–û –ü–†–û–ï–ö–¢–ê:
#   1. –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ 'name' –Ω–∞ –≤–∞—à –ø—Ä–æ–µ–∫—Ç
#   2. –û–±–Ω–æ–≤–∏—Ç–µ –ø—É—Ç–∏ –≤ 'paths' –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
#   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ secrets
#   4. –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

name: üîÑ CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      run_e2e:
        description: 'Run E2E tests'
        required: false
        default: true
        type: boolean

# üîí –†–∞–∑—Ä–µ—à–µ–Ω–∏—è (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
permissions:
  contents: read
  checks: write
  pull-requests: write

# üåç Environment variables
env:
  PYTHON_VERSION: "3.12"
  UV_VERSION: "latest"
  NODE_VERSION: "22"  
  PNPM_VERSION: "latest"

# üß™ Jobs
jobs:
  # üìã Changes Detection (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ç–µ—Å—Ç—ã)
  changes:
    name: üîç Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'docker-compose.yml'
              - 'Makefile'
              - '.github/workflows/ci.yml'
            frontend:
              - 'frontend/**'
              - '.github/workflows/ci.yml'
            docker:
              - 'docker-compose.yml'
              - 'ops/**'

  # üîß Backend Tests (Full with services - Linux only)
  backend-tests-linux:
    name: üîß Backend Tests (Ubuntu + Services)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_boilerplate
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: üöÄ Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}

      - name: üíæ Install dependencies
        working-directory: ./backend
        run: uv sync --dev

      - name: üîç Lint with ruff
        working-directory: ./backend
        run: |
          uv run ruff check .
          uv run ruff format --check .
          
      - name: üîç Type check with mypy  
        working-directory: ./backend
        run: uv run mypy .
        
      - name: üß™ Run unit tests (SQLite, no services)
        working-directory: ./backend
        env:
          DJANGO_SETTINGS_MODULE: app.settings.local
          DATABASE_URL: sqlite:///test.db
          REDIS_URL: redis://localhost:6379/0
        run: uv run pytest --maxfail=5


  # ‚öõÔ∏è Frontend Tests  
  frontend-tests:
    name: ‚öõÔ∏è Frontend Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        node-version: [18, 20, 22]

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üìã Get pnpm store directory
        working-directory: ./frontend
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: üíæ Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üìã Install dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: üîç Lint with ESLint
        working-directory: ./frontend  
        run: pnpm lint

      - name: üé® Check formatting with Prettier
        working-directory: ./frontend
        run: pnpm format:check

      - name: üîç Type check with TypeScript
        working-directory: ./frontend
        run: pnpm tsc --noEmit

      - name: üèóÔ∏è Build project
        working-directory: ./frontend
        run: pnpm build

      - name: üß™ Run unit tests
        working-directory: ./frontend
        run: pnpm test:run

      - name: üìä Generate coverage report
        if: matrix.node-version == 22
        working-directory: ./frontend
        run: pnpm test:run --coverage

      - name: üì§ Upload coverage to Codecov
        if: matrix.node-version == 22
        uses: codecov/codecov-action@v4
        with:
          directory: ./frontend/coverage
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  # üé≠ End-to-End Tests
  e2e-tests:
    name: üé≠ E2E Tests
    runs-on: ubuntu-latest
    needs: [changes, backend-tests-linux, frontend-tests]
    if: |
      always() && 
      (needs.backend-tests-linux.result == 'success' || needs.backend-tests-linux.result == 'skipped') &&
      (needs.frontend-tests.result == 'success' || needs.frontend-tests.result == 'skipped') &&
      (github.event.inputs.run_e2e == 'true' || github.event.inputs.run_e2e == '' || github.event_name != 'workflow_dispatch')

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: boilerplate
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üìã Install backend dependencies
        working-directory: ./backend
        run: uv sync

      - name: üìã Install frontend dependencies  
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: üóÑÔ∏è Setup database
        working-directory: ./backend
        env:
          DJANGO_SETTINGS_MODULE: app.settings.local
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/boilerplate
          REDIS_URL: redis://localhost:6379/0
        run: |
          uv run python manage.py migrate
          uv run python manage.py shell -c "
          from django.contrib.auth import get_user_model;
          User = get_user_model();
          User.objects.create_superuser('admin', 'admin@example.com', 'admin123') if not User.objects.filter(username='admin').exists() else None
          "

      - name: üèóÔ∏è Build frontend
        working-directory: ./frontend
        run: pnpm build

      - name: üé≠ Install Playwright browsers
        working-directory: ./frontend
        run: pnpm playwright install --with-deps

      - name: üöÄ Start backend server (background)
        working-directory: ./backend
        env:
          DJANGO_SETTINGS_MODULE: app.settings.local
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/boilerplate
          REDIS_URL: redis://localhost:6379/0
        run: |
          uv run python manage.py runserver 8000 &
          echo $! > backend.pid
          
      - name: ‚öôÔ∏è Start Celery worker (background)
        working-directory: ./backend
        env:
          DJANGO_SETTINGS_MODULE: app.settings.local
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/boilerplate
          REDIS_URL: redis://localhost:6379/0
        run: |
          uv run celery -A app worker --loglevel=error &
          echo $! > celery.pid

      - name: üåê Start frontend server (background)
        working-directory: ./frontend
        run: |
          pnpm preview --port 5173 &
          echo $! > frontend.pid

      - name: ‚è≥ Wait for services to be ready
        run: |
          echo "üîç Waiting for backend..."
          for i in {1..30}; do
            if curl -s http://localhost:8000/api/health/ > /dev/null; then
              echo "‚úÖ Backend is ready"
              break
            fi
            sleep 2
          done
          
          echo "üîç Waiting for frontend..."
          for i in {1..30}; do
            if curl -s http://localhost:5173 > /dev/null; then
              echo "‚úÖ Frontend is ready"
              break  
            fi
            sleep 2
          done

      - name: üß™ Run Playwright tests
        working-directory: ./frontend
        run: pnpm e2e
        env:
          CI: true

      - name: üì§ Upload Playwright report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 7

      - name: üõë Cleanup background processes
        if: always()
        run: |
          [ -f backend/backend.pid ] && kill $(cat backend/backend.pid) || true
          [ -f backend/celery.pid ] && kill $(cat backend/celery.pid) || true  
          [ -f frontend/frontend.pid ] && kill $(cat frontend/frontend.pid) || true

  # ‚úÖ Success Summary
  ci-success:
    name: ‚úÖ CI Success
    runs-on: ubuntu-latest
    needs: [changes, backend-tests-linux, frontend-tests, e2e-tests]
    if: always()
    
    steps:
      - name: üìä Check results
        run: |
          echo "üîç CI Results Summary:"
          echo "Backend Linux: ${{ needs.backend-tests-linux.result }}"

          echo "Frontend: ${{ needs.frontend-tests.result }}"  
          echo "E2E: ${{ needs.e2e-tests.result }}"
          
          if [[ "${{ needs.backend-tests-linux.result }}" == "failure" ]] || \
             [[ "${{ needs.frontend-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.e2e-tests.result }}" == "failure" ]]; then
            echo "‚ùå CI Failed"
            exit 1
          else
            echo "‚úÖ CI Passed"
          fi

      - name: üéâ Success notification
        if: success()
        run: |
          echo "::notice title=CI Success::All tests passed! üöÄ"

      - name: üí¨ PR Comment (on success)
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: `## ‚úÖ CI Pipeline Passed!\n\nüéâ All checks completed successfully:\n- ‚úÖ Backend tests\n- ‚úÖ Frontend tests\n- ‚úÖ E2E tests\n\nReady for review! üöÄ`
            });

# üìù –ê–î–ê–ü–¢–ê–¶–ò–Ø –î–õ–Ø –í–ê–®–ï–ì–û –ü–†–û–ï–ö–¢–ê:
# 
# 1. üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–æ–±—ã—Ç–∏—è:
#    - –ò–∑–º–µ–Ω–∏—Ç–µ 'name' –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
#    - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ branches –≤ on.push –∏ on.pull_request
#
# 2. üìÅ –ü—É—Ç–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
#    - –û–±–Ω–æ–≤–∏—Ç–µ paths-ignore –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
#    - –ò–∑–º–µ–Ω–∏—Ç–µ working-directory –µ—Å–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ –ø–∞–ø–∫–∏
#
# 3. üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
#    - –î–æ–±–∞–≤—å—Ç–µ secrets –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
#    - –û–±–Ω–æ–≤–∏—Ç–µ DATABASE_URL, REDIS_URL –¥–ª—è –≤–∞—à–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
#    - –î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏, —Ç–æ–∫–µ–Ω—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
#
# 4. üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:
#    - –ò–∑–º–µ–Ω–∏—Ç–µ POSTGRES_DB –Ω–∞ –∏–º—è –≤–∞—à–µ–π –ë–î
#    - –û–±–Ω–æ–≤–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è E2E
#
# 5. üß™ –¢–µ—Å—Ç—ã:
#    - –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (security, performance)
#    - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (Slack, Discord, email)
#    - –î–æ–±–∞–≤—å—Ç–µ –¥–µ–ø–ª–æ–π workflow –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
#
# 6. üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:
#    - –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Codecov –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
#    - –î–æ–±–∞–≤—å—Ç–µ badges –≤ README.md
#    - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤
